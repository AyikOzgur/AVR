
ATMEGA328P_I2C(TWI)_AT24C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d2  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000732  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f0  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9e:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TWI_Init>:
char TWI_Read_Nack(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		        /* Return received data */
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <TWI_Start>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <TWI_Start+0x6>
  c6:	08 95       	ret

000000c8 <TWI_Stop>:
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	08 95       	ret

000000d0 <TWI_Write>:
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <TWI_Write+0xa>
  e2:	08 95       	ret

000000e4 <TWI_Read_ack>:
  e4:	84 ec       	ldi	r24, 0xC4	; 196
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ee:	88 23       	and	r24, r24
  f0:	e4 f7       	brge	.-8      	; 0xea <TWI_Read_ack+0x6>
  f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f6:	08 95       	ret

000000f8 <EEPROM_Write>:

void EEPROM_Write (char data, uint16_t address)

{
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c8 2f       	mov	r28, r24
 100:	d6 2f       	mov	r29, r22
 102:	17 2f       	mov	r17, r23
	uint8_t dataaddress[2];
	dataaddress[0] = address >>8;
	dataaddress[1] = address & 0x00FF;  // decompose address into two 8bit datas
	TWI_Start();
 104:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_Start>
	TWI_Write(0xA0);					// Address of EEPROM with write bit         
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Write(dataaddress[0]);
 10e:	81 2f       	mov	r24, r17
 110:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Write(dataaddress[1]);
 114:	8d 2f       	mov	r24, r29
 116:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Write(data);					//send the data
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Stop();
 120:	0e 94 64 00 	call	0xc8	; 0xc8 <TWI_Stop>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	08 95       	ret

0000012c <EEPROM_READP>:

void EEPROM_READP (uint16_t address , char *data)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	18 2f       	mov	r17, r24
 136:	09 2f       	mov	r16, r25
 138:	eb 01       	movw	r28, r22
	uint8_t dataaddress[2];
	dataaddress[0] = address >>8;
	dataaddress[1] = address & 0x00FF;	// decompose address into two 8bit datas

	TWI_Start();						// Start bit
 13a:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_Start>
	TWI_Write(0xA0);					// Address of EEPROM with write bit
 13e:	80 ea       	ldi	r24, 0xA0	; 160
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Write(dataaddress[0]);			// MSB of data address
 144:	80 2f       	mov	r24, r16
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Write(dataaddress[1]);			// LSB of data address
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	TWI_Start();						//Repeated start
 150:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_Start>
	TWI_Write(0xA1);					// Address of EEPROM with read bit
 154:	81 ea       	ldi	r24, 0xA1	; 161
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Write>
	*data = TWI_Read_ack ();
 15a:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_Read_ack>
 15e:	88 83       	st	Y, r24
	TWI_Stop();
 160:	0e 94 64 00 	call	0xc8	; 0xc8 <TWI_Stop>

 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <main>:
char read_data;

int main(void)
{
	/* Replace with your application code */
	TWI_Init();
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <TWI_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	81 ee       	ldi	r24, 0xE1	; 225
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xa>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x14>
 182:	00 00       	nop
	_delay_ms(100);
	EEPROM_Write(write_data,0x0001);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	0e 94 7c 00 	call	0xf8	; 0xf8 <EEPROM_Write>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	81 ee       	ldi	r24, 0xE1	; 225
 194:	94 e0       	ldi	r25, 0x04	; 4
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x28>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x32>
 1a0:	00 00       	nop
	_delay_ms(100);
	EEPROM_READP(0x0001,&read_data);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	71 e0       	ldi	r23, 0x01	; 1
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 96 00 	call	0x12c	; 0x12c <EEPROM_READP>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x40>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
